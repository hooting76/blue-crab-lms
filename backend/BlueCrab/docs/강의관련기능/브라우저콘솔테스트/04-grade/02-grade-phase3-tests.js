/**
 * üìä Phase 3: Ïù¥Î≤§Ìä∏ Í∏∞Î∞ò ÏÑ±Ï†Å ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ ÌÖåÏä§Ìä∏ (ÎèÖÎ¶Ω Ïã§Ìñâ)
 * 
 * üöÄ ÏÇ¨Ïö©Î≤ï:
 *    await gradePhase3.listStudents()         // ÏàòÍ∞ïÏÉù Î™©Î°ù Ï°∞Ìöå (studentIdx ÌôïÏù∏)
 *    gradePhase3.setLecture('ETH201', 6)      // Í∞ïÏùò + ÌïôÏÉù ÏßÄÏ†ï (enrollmentIdx ÏûêÎèô Ï°∞Ìöå)
 *    await gradePhase3.runAll()               // Ï†ÑÏ≤¥ ÌÖåÏä§Ìä∏ (2Í∞ú)
 * 
 * üìã Í∞úÎ≥Ñ API ÌÖåÏä§Ìä∏:
 *    gradePhase3.attendance()  // Ï∂úÏÑù ÏöîÏ≤≠ ‚Üí ÏäπÏù∏ ‚Üí ÏÑ±Ï†Å ÏûêÎèô Ïû¨Í≥ÑÏÇ∞ (Ïã§Ï†ú Ï∂úÏÑù ÏãúÏä§ÌÖú ÏÇ¨Ïö©)
 *    gradePhase3.assignment()  // Í≥ºÏ†ú Ï†êÏàò ÏóÖÎç∞Ïù¥Ìä∏ ‚Üí ÏÑ±Ï†Å ÏûêÎèô Ïû¨Í≥ÑÏÇ∞
 * 
 * ‚úÖ Í∞úÏÑ† ÏÇ¨Ìï≠ (2025-10-23):
 *    - attendance() ÌÖåÏä§Ìä∏: Ïã§Ï†ú Ï∂úÏÑù ÏäπÏù∏ API ÏÇ¨Ïö© (Í∏∞Ï°¥ ÏãúÏä§ÌÖúÍ≥º ÌÜµÌï©)
 *    - Î∞±ÏóîÎìú: ENROLLMENT_DATA Î≥ëÌï© Î°úÏßÅ Ï†ÅÏö© (ÎçÆÏñ¥Ïì∞Í∏∞ Î∞©ÏßÄ)
 *    - gradeConfig ÏûêÎèô Ï†ÄÏû• Î∞è grade Í∞ùÏ≤¥ Ï¥àÍ∏∞Ìôî
 */

(function() {
    'use strict';
    
    // ============================================
    // Í∏∞Î≥∏ ÏÑ§Ï†ï
    // ============================================
    const API_BASE = 'https://bluecrab.chickenkiller.com/BlueCrab-1.0.0/api';
    
    // ÌÖåÏä§Ìä∏ ÏÑ§Ï†ï (Phase 1Í≥º ÎèôÏùºÌïú Íµ¨Ï°∞)
    const config = {
        lecSerial: null,      // Í∞ïÏùò ÏΩîÎìú (Ïòà: "ETH201")
        studentIdx: null,     // ÌïôÏÉù IDX
        enrollmentIdx: null,  // ÏàòÍ∞ï IDX (ÏûêÎèô Ï°∞ÌöåÎê®)
        assignmentIdx: null,  // Í≥ºÏ†ú IDX
        attendanceDate: new Date().toISOString().split('T')[0],
        attendanceStatus: 'PRESENT', // PRESENT, LATE, ABSENT
        assignmentScore: 85
    };
    
    // ============================================
    // Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò
    // ============================================
    
    function getToken() {
        return window.authToken || localStorage.getItem('jwtAccessToken');
    }
    
    async function apiCall(endpoint, data = null, method = 'POST') {
        const token = getToken();
        if (!token) {
            console.error('‚ùå Î°úÍ∑∏Ïù∏ ÌïÑÏöî! await login() Ïã§ÌñâÌïòÏÑ∏Ïöî.');
            return { success: false, error: 'Ïù∏Ï¶ù ÌÜ†ÌÅ∞ ÏóÜÏùå' };
        }
        
        const start = performance.now();
        try {
            const response = await fetch(`${API_BASE}${endpoint}`, {
                method,
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: method !== 'GET' ? JSON.stringify(data) : undefined
            });
            
            const duration = (performance.now() - start).toFixed(2);
            
            if (!response.ok) {
                const error = await response.json().catch(() => ({ message: response.statusText }));
                console.error(`‚ùå HTTP ${response.status}: ${error.message || response.statusText}`);
                return { success: false, error: error.message || error, status: response.status, duration };
            }
            
            const result = await response.json();
            console.log(`‚úÖ ${method} ${endpoint} (${duration}ms)`);
            return { success: true, data: result, duration };
            
        } catch (error) {
            const duration = (performance.now() - start).toFixed(2);
            console.error(`üî• ÏòàÏô∏:`, error.message);
            return { success: false, error: error.message, duration };
        }
    }
    
    // ============================================
    // ÏÑ§Ï†ï Ìï®Ïàò
    // ============================================
    
    function setLecture(lecSerial, studentIdx = null, assignmentIdx = null) {
        config.lecSerial = lecSerial;
        if (studentIdx !== null) config.studentIdx = studentIdx;
        if (assignmentIdx !== null) config.assignmentIdx = assignmentIdx;
        console.log('‚úÖ ÏÑ§Ï†ï ÏôÑÎ£å:', {
            lecSerial: config.lecSerial,
            studentIdx: config.studentIdx,
            assignmentIdx: config.assignmentIdx
        });
        return config;
    }
    
    function promptLecture() {
        const lecSerial = prompt('Í∞ïÏùò ÏΩîÎìú (Ïòà: ETH201):', config.lecSerial || '');
        const studentIdx = prompt('ÌïôÏÉù IDX:', config.studentIdx || '');
        const assignmentIdx = prompt('Í≥ºÏ†ú IDX:', config.assignmentIdx || '');
        
        if (lecSerial) config.lecSerial = lecSerial;
        if (studentIdx) config.studentIdx = parseInt(studentIdx);
        if (assignmentIdx) config.assignmentIdx = parseInt(assignmentIdx);
        
        console.log('‚úÖ ÏÑ§Ï†ï:', config);
        return config;
    }
    
    // enrollmentIdx ÏûêÎèô Ï°∞Ìöå Ìï®Ïàò
    async function getEnrollmentIdx() {
        if (config.enrollmentIdx) return config.enrollmentIdx;
        
        const result = await apiCall('/enrollments/grade-info', {
            action: 'get-grade',
            lecSerial: config.lecSerial,
            studentIdx: config.studentIdx
        });
        
        if (result?.success && result.data) {
            const enrollmentIdx = result.data.data?.enrollmentIdx || result.data.enrollmentIdx;
            if (enrollmentIdx) {
                config.enrollmentIdx = enrollmentIdx;
                console.log(`‚úÖ enrollmentIdx ÏûêÎèô Ï°∞Ìöå: ${enrollmentIdx}`);
                return enrollmentIdx;
            }
        }
        
        throw new Error('enrollmentIdx Ï°∞Ìöå Ïã§Ìå®');
    }
    
    // ============================================
    // ÏàòÍ∞ïÏÉù Î™©Î°ù Ï°∞Ìöå (lecSerial Í∏∞Î∞ò)
    // POST /enrollments/list
    // ============================================
    
    async function listStudents(page = 0, size = 20) {
        console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('üë• Í∞ïÏùòÎ≥Ñ ÏàòÍ∞ïÏÉù Î™©Î°ù Ï°∞Ìöå');
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        
        if (!config.lecSerial) {
            console.warn('‚ö†Ô∏è  Í∞ïÏùò ÎØ∏ÏÑ§Ï†ï! promptLecture() Ïã§Ìñâ...');
            const lecSerial = prompt('Í∞ïÏùò ÏΩîÎìú (Ïòà: ETH201):', '');
            if (lecSerial) config.lecSerial = lecSerial;
            else {
                console.error('‚ùå Í∞ïÏùò ÏΩîÎìú ÌïÑÏàò!');
                console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
                return { success: false, error: 'Í∞ïÏùò ÏΩîÎìú ÏóÜÏùå' };
            }
        }
        
        console.log(`\nüìö Í∞ïÏùò: ${config.lecSerial}`);
        console.log(`üìÑ ÌéòÏù¥ÏßÄ: ${page} (ÌÅ¨Í∏∞: ${size})\n`);
        
        const result = await apiCall('/enrollments/list', {
            lecSerial: config.lecSerial,
            page: page,
            size: size
        });
        
        if (result?.success && result.data?.data) {
            const data = result.data.data;
            const students = data.content || [];
            
            console.log(`\n‚úÖ Ï¥ù ${data.totalElements}Î™Ö ÏàòÍ∞ïÏÉù`);
            console.log(`üìÑ ${data.number + 1}/${data.totalPages} ÌéòÏù¥ÏßÄ\n`);
            
            if (students.length > 0) {
                console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
                students.forEach((s, i) => {
                    console.log(`${i + 1}. [IDX: ${s.STUDENT_IDX}] ${s.STUDENT_NAME} (${s.STUDENT_NO})`);
                    console.log(`   ÌïôÍ≥º: ${s.DEPARTMENT || 'N/A'} | ÏÉÅÌÉú: ${s.STATUS}`);
                    console.log(`   Ïã†Ï≤≠Ïùº: ${s.ENROLLED_AT}`);
                    if (i < students.length - 1) console.log('');
                });
                console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
                
                console.log('üí° Tip: ÌïôÏÉù IDXÎ•º Î≥µÏÇ¨Ìï¥ÏÑú setLecture()Ïóê ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî!');
                console.log(`   Ïòà: gradePhase3.setLecture("${config.lecSerial}", ${students[0].STUDENT_IDX})`);
            } else {
                console.log('‚ö†Ô∏è  ÏàòÍ∞ïÏÉùÏù¥ ÏóÜÏäµÎãàÎã§.');
            }
            
            console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
            return { success: true, data: students, total: data.totalElements };
            
        } else {
            console.error('‚ùå Ï°∞Ìöå Ïã§Ìå®:', result.error);
            console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
            return { success: false, error: result.error };
        }
    }
    
    // ============================================
    // 1. Ï∂úÏÑù ÏóÖÎç∞Ïù¥Ìä∏ ‚Üí ÏÑ±Ï†Å ÏûêÎèô Ïû¨Í≥ÑÏÇ∞ ÌôïÏù∏
    // ‚úÖ Ïã§Ï†ú Ï∂úÏÑù ÏäπÏù∏ API ÏÇ¨Ïö© (Í∏∞Ï°¥ Ï∂úÏÑù ÏãúÏä§ÌÖúÍ≥º ÌÜµÌï©)
    // POST /enrollments/grade-info (action: get-grade)
    // POST /api/student/attendance/request (Ï∂úÏÑù ÏöîÏ≤≠)
    // PUT /api/professor/attendance/requests/{requestIdx}/approve (ÏäπÏù∏)
    // ============================================
    
    async function testAttendanceUpdate() {
        console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('üìÖ Ï∂úÏÑù ÏäπÏù∏ ‚Üí ÏÑ±Ï†Å ÏûêÎèô Ïû¨Í≥ÑÏÇ∞');
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('üí° Ïã§Ï†ú Ï∂úÏÑù ÏãúÏä§ÌÖú API ÏÇ¨Ïö© (ÏöîÏ≤≠ ‚Üí ÏäπÏù∏)');
        
        if (!config.lecSerial || !config.studentIdx) {
            console.warn('‚ö†Ô∏è  Í∞ïÏùò/ÌïôÏÉù ÎØ∏ÏÑ§Ï†ï! promptLecture() Ïã§Ìñâ...');
            promptLecture();
        }
        
        // enrollmentIdx ÏûêÎèô Ï°∞Ìöå
        try {
            await getEnrollmentIdx();
        } catch (error) {
            console.error('‚ùå enrollmentIdx Ï°∞Ìöå Ïã§Ìå®:', error.message);
            console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
            return { success: false, error: error.message };
        }
        
        // 1Îã®Í≥Ñ: ÏóÖÎç∞Ïù¥Ìä∏ Ï†Ñ ÏÑ±Ï†Å Ï°∞Ìöå
        console.log('\nüìä [1/4] ÏóÖÎç∞Ïù¥Ìä∏ Ï†Ñ ÏÑ±Ï†Å Ï°∞Ìöå');
        const beforeData = {
            action: 'get-grade',
            lecSerial: config.lecSerial,
            studentIdx: config.studentIdx
        };
        const beforeResult = await apiCall('/enrollments/grade-info', beforeData);
        
        let beforeScore = null;
        let beforeAttendanceData = null;
        if (beforeResult?.success && beforeResult.data) {
            const d = beforeResult.data.data || beforeResult.data;
            beforeScore = d.attendanceScore;
            beforeAttendanceData = d.attendance;
            console.log(`   Ï∂úÏÑù Ï†êÏàò: ${beforeScore?.toFixed(2) || 'N/A'}`);
            console.log(`   Ï∂úÏÑù: ${d.presentCount || 0}Ìöå`);
            console.log(`   ÏßÄÍ∞Å: ${d.lateCount || 0}Ìöå`);
            console.log(`   Í≤∞ÏÑù: ${d.absentCount || 0}Ìöå`);
        }
        
        // 2Îã®Í≥Ñ: Ï∂úÏÑù ÏöîÏ≤≠ ÏÉùÏÑ± (ÌïôÏÉù)
        console.log(`\nüìù [2/4] Ï∂úÏÑù ÏöîÏ≤≠ ÏÉùÏÑ±`);
        const requestData = {
            lecSerial: config.lecSerial,
            studentIdx: config.studentIdx,
            sessionNumber: (beforeAttendanceData?.sessions?.length || 0) + 1,
            requestDate: config.attendanceDate,
            reason: 'Phase 3 ÌÖåÏä§Ìä∏ - ÏÑ±Ï†Å ÏûêÎèô Ïû¨Í≥ÑÏÇ∞ ÌôïÏù∏'
        };
        
        console.log(`   Í∞ïÏùò: ${requestData.lecSerial}`);
        console.log(`   ÌïôÏÉù: ${requestData.studentIdx}`);
        console.log(`   ÌöåÏ∞®: ${requestData.sessionNumber}`);
        
        const createRequestResult = await apiCall('/student/attendance/request', requestData);
        
        if (!createRequestResult?.success) {
            console.log('\n‚ùå Ï∂úÏÑù ÏöîÏ≤≠ ÏÉùÏÑ± Ïã§Ìå®:', createRequestResult.error);
            console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
            return createRequestResult;
        }
        
        const requestIdx = createRequestResult.data?.data?.requestIdx || createRequestResult.data?.requestIdx;
        console.log(`‚úÖ Ï∂úÏÑù ÏöîÏ≤≠ ÏÉùÏÑ± ÏôÑÎ£å (requestIdx: ${requestIdx})`);
        
        // 3Îã®Í≥Ñ: ÍµêÏàò ÏäπÏù∏
        console.log(`\nüë®‚Äçüè´ [3/4] ÍµêÏàò ÏäπÏù∏ Ï≤òÎ¶¨`);
        console.log(`   ÏöîÏ≤≠ IDX: ${requestIdx}`);
        console.log(`   ÏÉÅÌÉú: ${config.attendanceStatus} ‚Üí Î≥ÄÌôò`);
        
        const approveResult = await apiCall(
            `/professor/attendance/requests/${requestIdx}/approve`,
            {},
            'PUT'
        );
        
        if (!approveResult?.success) {
            console.log('\n‚ùå Ï∂úÏÑù ÏäπÏù∏ Ïã§Ìå®:', approveResult.error);
            console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
            return approveResult;
        }
        
        console.log('‚úÖ Ï∂úÏÑù ÏäπÏù∏ ÏôÑÎ£å');
        
        // 4Îã®Í≥Ñ: ÏóÖÎç∞Ïù¥Ìä∏ ÌõÑ ÏÑ±Ï†Å Ïû¨Ï°∞Ìöå
        console.log(`\nüìä [4/4] ÏóÖÎç∞Ïù¥Ìä∏ ÌõÑ ÏÑ±Ï†Å Ï°∞Ìöå (1Ï¥à ÎåÄÍ∏∞...)`);
        await new Promise(resolve => setTimeout(resolve, 1000)); // ÏÑúÎ≤Ñ Ï≤òÎ¶¨ ÎåÄÍ∏∞
        
        const afterResult = await apiCall('/enrollments/grade-info', beforeData);
        
        if (afterResult?.success && afterResult.data) {
            const d = afterResult.data.data || afterResult.data;
            const afterScore = d.attendanceScore;
            console.log(`   Ï∂úÏÑù Ï†êÏàò: ${afterScore?.toFixed(2) || 'N/A'}`);
            console.log(`   Ï∂úÏÑù: ${d.presentCount || 0}Ìöå`);
            console.log(`   ÏßÄÍ∞Å: ${d.lateCount || 0}Ìöå`);
            console.log(`   Í≤∞ÏÑù: ${d.absentCount || 0}Ìöå`);
            
            if (beforeScore !== null && afterScore !== null) {
                const diff = afterScore - beforeScore;
                console.log(`\n   üìà Î≥ÄÌôî: ${diff >= 0 ? '+' : ''}${diff.toFixed(2)}Ï†ê`);
                
                if (Math.abs(diff) > 0.01) {
                    console.log('   ‚úÖ ÏÑ±Ï†Å ÏûêÎèô Ïû¨Í≥ÑÏÇ∞ ÌôïÏù∏!');
                } else {
                    console.log('   ‚ö†Ô∏è  Ï†êÏàò Î≥ÄÌôî ÏóÜÏùå (ÎèôÏùºÌïú Ï∂úÏÑù ÏÉÅÌÉú?)');
                }
            }
            
            console.log('\n‚úÖ ÏÑ±Í≥µ! Ï∂úÏÑù ÏäπÏù∏Ïù¥ ÏÑ±Ï†ÅÏóê Î∞òÏòÅÎêòÏóàÏäµÎãàÎã§.');
        } else {
            console.log('\n‚ö†Ô∏è  ÏÑ±Ï†Å Ï°∞Ìöå Ïã§Ìå®:', afterResult.error);
        }
        
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
        return { 
            success: true, 
            before: beforeResult, 
            request: createRequestResult,
            approve: approveResult,
            after: afterResult 
        };
    }
    
    // ============================================
    // 2. Í≥ºÏ†ú Ï†êÏàò ÏóÖÎç∞Ïù¥Ìä∏ ‚Üí ÏÑ±Ï†Å ÏûêÎèô Ïû¨Í≥ÑÏÇ∞ ÌôïÏù∏
    // POST /enrollments/grade-info (action: get-grade)
    // PUT /assignments/{assignmentIdx}/grade
    // ============================================
    
    async function testAssignmentGrade() {
        console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('üìù Í≥ºÏ†ú Ï†êÏàò ÏóÖÎç∞Ïù¥Ìä∏ ‚Üí ÏÑ±Ï†Å ÏûêÎèô Ïû¨Í≥ÑÏÇ∞');
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        
        if (!config.lecSerial || !config.studentIdx) {
            console.warn('‚ö†Ô∏è  Í∞ïÏùò/ÌïôÏÉù ÎØ∏ÏÑ§Ï†ï! promptLecture() Ïã§Ìñâ...');
            promptLecture();
        }
        
        if (!config.assignmentIdx) {
            const idx = prompt('Í≥ºÏ†ú IDX (ASSIGNMENT_IDX):', '');
            if (idx) config.assignmentIdx = parseInt(idx);
            else {
                console.error('‚ùå Í≥ºÏ†ú IDX ÌïÑÏàò!');
                console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
                return { success: false, error: 'Í≥ºÏ†ú IDX ÏóÜÏùå' };
            }
        }
        
        // 1Îã®Í≥Ñ: ÏóÖÎç∞Ïù¥Ìä∏ Ï†Ñ ÏÑ±Ï†Å Ï°∞Ìöå
        console.log('\nüìä [1/3] ÏóÖÎç∞Ïù¥Ìä∏ Ï†Ñ ÏÑ±Ï†Å Ï°∞Ìöå');
        const gradeData = {
            action: 'get-grade',
            lecSerial: config.lecSerial,
            studentIdx: config.studentIdx
        };
        const beforeResult = await apiCall('/enrollments/grade-info', gradeData);
        
        let beforeTotal = null;
        let beforeAssignments = [];
        if (beforeResult?.success && beforeResult.data) {
            const d = beforeResult.data.data || beforeResult.data;
            beforeTotal = d.totalScore;
            beforeAssignments = d.assignmentScores || [];
            console.log(`   Ï¥ùÏ†ê: ${beforeTotal?.toFixed(2) || 'N/A'}`);
            console.log(`   Í≥ºÏ†ú Ïàò: ${beforeAssignments.length}Í∞ú`);
            if (beforeAssignments.length > 0) {
                beforeAssignments.slice(0, 3).forEach((a, i) => {
                    console.log(`     ${i+1}. ${a.name}: ${a.score}/${a.maxScore}`);
                });
                if (beforeAssignments.length > 3) {
                    console.log(`     ... Ïô∏ ${beforeAssignments.length - 3}Í∞ú`);
                }
            }
        }
        
        // 2Îã®Í≥Ñ: Í≥ºÏ†ú Ï†êÏàò ÏóÖÎç∞Ïù¥Ìä∏
        console.log(`\nüìù [2/3] Í≥ºÏ†ú Ï†êÏàò ÏóÖÎç∞Ïù¥Ìä∏`);
        const updateData = {
            studentIdx: config.studentIdx,
            score: config.assignmentScore
        };
        
        console.log(`   Í≥ºÏ†ú IDX: ${config.assignmentIdx}`);
        console.log(`   ÌïôÏÉù IDX: ${updateData.studentIdx}`);
        console.log(`   Ï†êÏàò: ${updateData.score}`);
        
        const updateResult = await apiCall(
            `/assignments/${config.assignmentIdx}/grade`,
            updateData,
            'PUT'
        );
        
        if (!updateResult?.success) {
            console.log('\n‚ùå Í≥ºÏ†ú Ï†êÏàò ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', updateResult.error);
            console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
            return updateResult;
        }
        
        console.log('‚úÖ Í≥ºÏ†ú Ï†êÏàò ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
        
        // 3Îã®Í≥Ñ: ÏóÖÎç∞Ïù¥Ìä∏ ÌõÑ ÏÑ±Ï†Å Ïû¨Ï°∞Ìöå
        console.log(`\nüìä [3/3] ÏóÖÎç∞Ïù¥Ìä∏ ÌõÑ ÏÑ±Ï†Å Ï°∞Ìöå (1Ï¥à ÎåÄÍ∏∞...)`);
        await new Promise(resolve => setTimeout(resolve, 1000)); // ÏÑúÎ≤Ñ Ï≤òÎ¶¨ ÎåÄÍ∏∞
        
        const afterResult = await apiCall('/enrollments/grade-info', gradeData);
        
        if (afterResult?.success && afterResult.data) {
            const d = afterResult.data.data || afterResult.data;
            const afterTotal = d.totalScore;
            const afterAssignments = d.assignmentScores || [];
            
            console.log(`   Ï¥ùÏ†ê: ${afterTotal?.toFixed(2) || 'N/A'}`);
            console.log(`   Í≥ºÏ†ú Ïàò: ${afterAssignments.length}Í∞ú`);
            if (afterAssignments.length > 0) {
                afterAssignments.slice(0, 3).forEach((a, i) => {
                    console.log(`     ${i+1}. ${a.name}: ${a.score}/${a.maxScore}`);
                });
                if (afterAssignments.length > 3) {
                    console.log(`     ... Ïô∏ ${afterAssignments.length - 3}Í∞ú`);
                }
            }
            
            if (beforeTotal !== null && afterTotal !== null) {
                const diff = afterTotal - beforeTotal;
                console.log(`\n   üìà Ï¥ùÏ†ê Î≥ÄÌôî: ${diff >= 0 ? '+' : ''}${diff.toFixed(2)}Ï†ê`);
                
                if (Math.abs(diff) > 0.01) {
                    console.log('   ‚úÖ ÏÑ±Ï†Å ÏûêÎèô Ïû¨Í≥ÑÏÇ∞ ÌôïÏù∏!');
                } else {
                    console.log('   ‚ö†Ô∏è  Ï†êÏàò Î≥ÄÌôî ÏóÜÏùå (ÎèôÏùºÌïú Ï†êÏàò?)');
                }
            }
            
            console.log('\n‚úÖ ÏÑ±Í≥µ! Í≥ºÏ†ú Ï†êÏàò ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä ÏÑ±Ï†ÅÏóê Î∞òÏòÅÎêòÏóàÏäµÎãàÎã§.');
        } else {
            console.log('\n‚ö†Ô∏è  ÏÑ±Ï†Å Ï°∞Ìöå Ïã§Ìå®:', afterResult.error);
        }
        
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
        return { success: true, before: beforeResult, update: updateResult, after: afterResult };
    }
    
    // ============================================
    // Ï†ÑÏ≤¥ ÌÖåÏä§Ìä∏ Ïã§Ìñâ
    // ============================================
    
    async function runAllTests() {
        console.log('\nüöÄ Phase 3 Ï†ÑÏ≤¥ ÌÖåÏä§Ìä∏ ÏãúÏûë');
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
        
        const results = { total: 2, success: 0, failed: 0, tests: [] };
        
        try {
            const tests = [
                { name: 'Ï∂úÏÑù ÏóÖÎç∞Ïù¥Ìä∏ ‚Üí ÏÑ±Ï†Å Ïû¨Í≥ÑÏÇ∞', fn: testAttendanceUpdate },
                { name: 'Í≥ºÏ†ú Ï†êÏàò ‚Üí ÏÑ±Ï†Å Ïû¨Í≥ÑÏÇ∞', fn: testAssignmentGrade }
            ];
            
            for (const test of tests) {
                const r = await test.fn();
                results.tests.push({ name: test.name, success: r?.success || false });
                if (r?.success) results.success++; else results.failed++;
            }
            
            console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
            console.log('üìä Phase 3 Í≤∞Í≥º');
            console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
            console.log(`Ï¥ù: ${results.total}Í∞ú`);
            console.log(`‚úÖ ÏÑ±Í≥µ: ${results.success}Í∞ú`);
            console.log(`‚ùå Ïã§Ìå®: ${results.failed}Í∞ú`);
            console.log(`üìà ÏÑ±Í≥µÎ•†: ${((results.success / results.total) * 100).toFixed(1)}%`);
            console.log('\nÏÉÅÏÑ∏:');
            results.tests.forEach((t, i) => {
                console.log(`  ${t.success ? '‚úÖ' : '‚ùå'} ${i+1}. ${t.name}`);
            });
            console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
            
        } catch (error) {
            console.error('‚ùå Ïã§Ìñâ Ï§ë ÏòàÏô∏:', error);
        }
        
        return results;
    }
    
    // ============================================
    // Ï†ÑÏó≠ ÎÖ∏Ï∂ú
    // ============================================
    
    window.gradePhase3 = {
        // ÏÑ§Ï†ï
        setLecture,
        promptLecture,
        getConfig: () => config,
        
        // Ï°∞Ìöå
        listStudents,  // ÏàòÍ∞ïÏÉù Î™©Î°ù Ï°∞Ìöå
        
        // Í∞úÎ≥Ñ ÌÖåÏä§Ìä∏
        attendance: testAttendanceUpdate,
        assignment: testAssignmentGrade,
        
        // Ï†ÑÏ≤¥ Ïã§Ìñâ
        runAll: runAllTests
    };
    
    console.log('‚úÖ Phase 3 ÌÖåÏä§Ìä∏ Î°úÎìú ÏôÑÎ£å (ÎèÖÎ¶Ω Î≤ÑÏ†Ñ)');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('üéØ ÏôÑÏ†Ñ ÎèÖÎ¶Ω Ïã§Ìñâ - Îã§Î•∏ ÌååÏùº Î∂àÌïÑÏöî!');
    console.log('');
    console.log('üìù Í∏∞Î≥∏ ÏÇ¨Ïö©:');
    console.log('   0. await gradePhase3.listStudents()           - ÏàòÍ∞ïÏÉù Î™©Î°ù Ï°∞Ìöå (ÏÑ†ÌÉù)');
    console.log('   1. gradePhase3.setLecture("ETH201", 6)        - Í∞ïÏùò+ÌïôÏÉù ÏßÄÏ†ï (enrollmentIdx ÏûêÎèô)');
    console.log('   2. await gradePhase3.runAll()                 - Ï†ÑÏ≤¥ ÌÖåÏä§Ìä∏ (2Í∞ú)');
    console.log('');
    console.log('üß™ Í∞úÎ≥Ñ API:');
    console.log('   await gradePhase3.attendance()  - Ï∂úÏÑù ÏöîÏ≤≠ ‚Üí ÏäπÏù∏ ‚Üí ÏÑ±Ï†Å ÏûêÎèô Ïû¨Í≥ÑÏÇ∞');
    console.log('                                      (Ïã§Ï†ú Ï∂úÏÑù ÏãúÏä§ÌÖú API ÏÇ¨Ïö©)');
    console.log('   await gradePhase3.assignment()  - Í≥ºÏ†ú Ï†êÏàò ‚Üí ÏÑ±Ï†Å ÏûêÎèô Ïû¨Í≥ÑÏÇ∞');
    console.log('');
    console.log('üí° ÎòêÎäî ÎåÄÌôîÌòï:');
    console.log('   gradePhase3.promptLecture()     - ÌîÑÎ°¨ÌîÑÌä∏Î°ú ÏûÖÎ†•');
    console.log('');
    console.log('‚úÖ Í∞úÏÑ† ÏÇ¨Ìï≠ (2025-10-23):');
    console.log('   ‚Ä¢ attendance() ÌÖåÏä§Ìä∏: Ïã§Ï†ú Ï∂úÏÑù ÏäπÏù∏ APIÎ°ú Î≥ÄÍ≤Ω');
    console.log('   ‚Ä¢ Î∞±ÏóîÎìú: JSON Î≥ëÌï© Î°úÏßÅ Ï†ÅÏö© (sessions, summary Ïú†ÏßÄ)');
    console.log('   ‚Ä¢ gradeConfig ÏûêÎèô Ï†ÄÏû• Î∞è grade Í∞ùÏ≤¥ Ï¥àÍ∏∞Ìôî');
    console.log('');
    console.log('üìö Ï∞∏Í≥†: ÏàòÍ∞ïÏÉù Î™©Î°ù Ï°∞Ìöå API');
    console.log('   ‚Ä¢ POST /api/enrollments/list (lecSerial Í∏∞Î∞ò)');
    console.log('   ‚Ä¢ ÏÉÅÏÑ∏ ÌÖåÏä§Ìä∏: docs/Í∞ïÏùòÍ¥ÄÎ†®Í∏∞Îä•/Î∏åÎùºÏö∞Ï†ÄÏΩòÏÜîÌÖåÏä§Ìä∏/03-professor/lecture-test-5-professor-students.js');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    
})();
